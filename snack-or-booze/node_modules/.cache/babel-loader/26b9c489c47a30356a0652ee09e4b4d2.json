{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prima\\\\Documents\\\\primscode\\\\2-springboard\\\\assessment_9\\\\react-2\\\\react-2\\\\snack-or-booze\\\\src\\\\FoodForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport SnackOrBoozeApi from \"./Api\";\nimport { Card, CardBody, CardTitle, Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FoodForm(_ref) {\n  _s();\n\n  let {\n    getSnacks,\n    getDrinks\n  } = _ref;\n  // //refresh the app to update food database\n  // function loadRefreshContent() {\n  // \twindow.location.reload(false);\n  // }\n  const initialState = {\n    foodType: \"\",\n    name: \"\",\n    description: \"\",\n    recipe: \"\",\n    serve: \"\"\n  };\n  const [formData, setFormData] = useState(initialState);\n  const formKey = [\"name\", \"description\", \"recipe\", \"serve\"]; // show msg when form is submitted\n\n  const [formSubmitionStatus, setFormSubmitionStatus] = useState(\"notSubmitted\");\n\n  const handleSubmitionStatus = () => {\n    setFormSubmitionStatus(\"Submitted\");\n  };\n\n  const formSubmittedSuccess = /*#__PURE__*/_jsxDEV(CardBody, {\n    children: /*#__PURE__*/_jsxDEV(CardTitle, {\n      children: \"You have successfully created a new food item!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, this); //handle form change, submit, and validate if all data are inputted\n\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(data => ({ ...data,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (handleValidation() === true) {\n      SnackOrBoozeApi.createFood(formData, formData.foodType);\n      setFormData(initialState);\n      getDrinks;\n      getSnacks;\n      handleSubmitionStatus();\n    }\n\n    return;\n  };\n\n  const handleValidation = () => {\n    for (let key in formData) {\n      if (formData[key].length === 0) {\n        alert(`${key} was not filled!`);\n        return false;\n      }\n    }\n\n    return true;\n  }; //form to create a new food item\n\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [formSubmitionStatus === \"Submitted\" && formSubmittedSuccess, /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(CardTitle, {\n          children: \"Create A New Food\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Label, {\n            htmlFor: \"foodType\",\n            children: \"Select Your Food Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"select\",\n            name: \"foodType\",\n            value: formData.foodType,\n            onChange: handleChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Select Food Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"drinks\",\n              children: \"Drinks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"snacks\",\n              children: \"Snacks\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), formKey.map(key => /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: key,\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              id: key,\n              name: key,\n              placeholder: key,\n              value: formData.key,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 34\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FoodForm, \"dpks9iatAdECTNQR8hi49q/eX6c=\");\n\n_c = FoodForm;\nexport default FoodForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodForm\");","map":{"version":3,"names":["React","useState","SnackOrBoozeApi","Card","CardBody","CardTitle","Button","Form","FormGroup","Label","Input","FoodForm","getSnacks","getDrinks","initialState","foodType","name","description","recipe","serve","formData","setFormData","formKey","formSubmitionStatus","setFormSubmitionStatus","handleSubmitionStatus","formSubmittedSuccess","handleChange","e","value","target","data","handleSubmit","preventDefault","handleValidation","createFood","key","length","alert","map"],"sources":["C:/Users/prima/Documents/primscode/2-springboard/assessment_9/react-2/react-2/snack-or-booze/src/FoodForm.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport SnackOrBoozeApi from \"./Api\";\r\nimport { Card, CardBody, CardTitle, Button, Form, FormGroup, Label, Input} from \"reactstrap\";\r\n\r\nfunction FoodForm({getSnacks, getDrinks}){\r\n\r\n    // //refresh the app to update food database\r\n    // function loadRefreshContent() {\r\n\t// \twindow.location.reload(false);\r\n    // }\r\n\r\n    const initialState = {\r\n        foodType:\"\",\r\n        name:\"\",\r\n        description:\"\",\r\n        recipe:\"\",\r\n        serve:\"\"\r\n    }\r\n\r\n    const [formData, setFormData] = useState(initialState)\r\n    const formKey = [\"name\", \"description\", \"recipe\", \"serve\"];\r\n\r\n    // show msg when form is submitted\r\n    const [formSubmitionStatus, setFormSubmitionStatus] = useState(\"notSubmitted\");\r\n    const handleSubmitionStatus = () => {\r\n        setFormSubmitionStatus(\"Submitted\");\r\n    }\r\n\r\n    const formSubmittedSuccess = (\r\n            <CardBody>\r\n                <CardTitle>\r\n                    You have successfully created a new food item!\r\n                </CardTitle>\r\n            </CardBody>\r\n    )\r\n\r\n    //handle form change, submit, and validate if all data are inputted\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        setFormData(data => ({\r\n            ...data,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (handleValidation() === true){\r\n            SnackOrBoozeApi.createFood(formData, formData.foodType);\r\n            setFormData(initialState);\r\n            getDrinks;\r\n            getSnacks;\r\n            handleSubmitionStatus();\r\n        }\r\n        return;\r\n    }\r\n\r\n    const handleValidation = () => {\r\n        for (let key in formData){\r\n            if (formData[key].length === 0){\r\n                alert(`${key} was not filled!`)\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //form to create a new food item\r\n    return (\r\n        <section>\r\n            <Card>\r\n            {formSubmitionStatus === \"Submitted\" && formSubmittedSuccess}\r\n                <CardBody>\r\n                    <CardTitle>\r\n                        Create A New Food\r\n                    </CardTitle>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <FormGroup></FormGroup>\r\n                            <Label htmlFor=\"foodType\">Select Your Food Type</Label>\r\n                            <Input type=\"select\" name=\"foodType\" value={formData.foodType} onChange={handleChange}>\r\n                                <option>Select Food Type</option>\r\n                                <option value=\"drinks\">Drinks</option>\r\n                                <option value=\"snacks\">Snacks</option>\r\n                            </Input>\r\n                        \r\n                            {formKey.map((key) => \r\n                                 <FormGroup>\r\n                                    <Label htmlFor={key}>{key}</Label>\r\n                                    <Input \r\n                                        type=\"text\" \r\n                                        id={key}\r\n                                        name={key} \r\n                                        placeholder={key}\r\n                                        value={formData.key} \r\n                                        onChange={handleChange} />\r\n                                </FormGroup>\r\n                            )}\r\n\r\n                        <Button>Create</Button>\r\n                    </Form>                \r\n                </CardBody>\r\n            </Card>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default FoodForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}